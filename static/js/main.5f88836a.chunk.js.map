{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","location","setLocation","weather","setWeather","temperatureColor","setTemperatureColor","a","axios","baseURL","url","params","lat","latitude","lon","longitude","appid","units","data","getTemperatureColor","main","temp","className","style","backgroundColor","onClick","navigator","geolocation","getCurrentPosition","coords","getWeather","error","console","log","code","src","icon","alt","Math","round","description","name","sys","country","type","min","max","value","onChange","e","target","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"qTA2FeA,MAvFf,WAAgB,IAAD,UACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGmCJ,mBAAS,IAH5C,mBAGNK,EAHM,KAGYC,EAHZ,iDAeb,WAA0BL,GAA1B,iBAAAM,EAAA,sEACuBC,EAAM,CACzBC,QAAS,2CACTC,IAAK,UACLC,OAAQ,CACNC,IAAKX,EAASY,SACdC,IAAKb,EAASc,UACdC,MAAO,mCACPC,MAAO,YARb,uBACSC,EADT,EACSA,KAUPd,EAAWc,GACXZ,EAAoBa,EAAoBD,EAAKE,KAAKC,OAZpD,kBAaSH,GAbT,4CAfa,sBAwCb,SAASC,EAAoBE,GAK3B,OAHEA,GAAM,GAAK,UACTA,EAAK,GAAK,UACR,UAKR,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,aAAaC,MAAO,CAACC,gBAAiBnB,IAErDJ,EACC,4BACE,yCAAeA,EAASY,UACxB,0CAAgBZ,EAASc,YAG3B,yBAAKO,UAAU,YACb,qEAGA,yBAAKA,UAAU,WACb,2CACA,4BAAQG,QA7DA,YACbxB,GAAYyB,UAAUC,aACzBD,UAAUC,YAAYC,oBACpB,SAAAD,GACEzB,EAAYyB,EAAYE,QARnB,oCASLC,CAAWH,EAAYE,WAEzB,SAAAE,GAAK,OAAIC,QAAQC,IAAI,+BAAiCF,EAAMG,WAsDtD,WAIL/B,GAAW,oCACV,yBAAKgC,IAAG,4CAAuChC,EAAQA,QAAQ,GAAGiC,KAA1D,WAAyEC,IAAI,KACrF,wBAAIf,UAAU,wBAAwBgB,KAAKC,MAAL,UAAWpC,EAAQiB,YAAnB,aAAW,EAAcC,MAA/D,IAAsE,yCACtE,yBAAKC,UAAU,iBAAf,UACGrB,EAASuC,mBADZ,kBAEKrC,EAAQsC,KAFb,uBAEsBtC,EAAQuC,WAF9B,aAEsB,EAAaC,WAGrC,2BACE,2BAAOC,KAAK,QAAQC,IAAI,MAAMC,IAAI,KAAKC,MAAK,UAAE5C,EAAQiB,YAAV,aAAE,EAAcC,KACrD2B,SAAU,SAAAC,GAAC,OAjDF5B,EAiDqB4B,EAAEC,OAAOH,MAhDpD3C,EAAW,eACND,EADK,CAERiB,KAAK,eACAjB,EAAQiB,KADT,CAEFC,KAAMA,YAGVf,EAAoBa,EAAoBE,IAR1C,IAAwBA,SCtBN8B,QACW,cAA7BC,OAAOnD,SAASoD,UAEe,UAA7BD,OAAOnD,SAASoD,UAEhBD,OAAOnD,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBhC,WACrBA,UAAUiC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLC,QAAQD,MAAMA,EAAMkC,c","file":"static/js/main.5f88836a.chunk.js","sourcesContent":["import * as axios from \"axios\";\nimport React, {useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [location, setLocation] = useState('');\n  const [weather, setWeather] = useState('');\n  const [temperatureColor, setTemperatureColor] = useState('');\n  const getLocation = () => {\n    if (!location && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        geolocation => {\n          setLocation(geolocation.coords);\n          getWeather(geolocation.coords)\n        },\n        error => console.log('Error occurred. Error code: ' + error.code)\n      )\n    }\n  };\n  async function getWeather(location) {\n    const {data} = await axios({\n      baseURL: 'https://api.openweathermap.org/data/2.5/',\n      url: 'weather',\n      params: {\n        lat: location.latitude,\n        lon: location.longitude,\n        appid: '142c1e9a1787ce68fb592fb786e93507',\n        units: 'metric'\n      }\n    });\n    setWeather(data);\n    setTemperatureColor(getTemperatureColor(data.main.temp));\n    return data;\n  }\n  function setTemperature(temp) {\n    setWeather({\n      ...weather,\n      main: {\n        ...weather.main,\n        temp: temp\n      }\n    });\n    setTemperatureColor(getTemperatureColor(temp));\n  }\n  function getTemperatureColor(temp) {\n    const temperatureColor =\n      temp<-10 ? '#00ffff' :\n        temp>30 ? '#ff8c00' :\n          '#fff700';\n    return temperatureColor;\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{backgroundColor: temperatureColor}}>\n\n        {location ?\n          <ul>\n            <li>latitude: {location.latitude}</li>\n            <li>longitude: {location.longitude}</li>\n          </ul>\n          :\n          <div className=\"question\">\n            <p>\n              Do you allow to proceed your location?\n            </p>\n            <div className=\"buttons\">\n              <button>Decline</button>\n              <button onClick={getLocation}>Allow</button>\n            </div>\n          </div>\n        }\n        {weather && <>\n          <img src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"\"/>\n          <h2 className=\"current__temperature\">{Math.round(weather.main?.temp)} <small>Â°C</small></h2>\n          <div className=\"current__city\">\n            {location.description ??\n            `${weather.name}, ${weather.sys?.country}`}\n          </div>\n        </>}\n        <p>\n          <input type=\"range\" min=\"-50\" max=\"50\" value={weather.main?.temp}\n                 onChange={e => setTemperature(e.target.value)}/>\n        </p>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}