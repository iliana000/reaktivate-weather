{"version":3,"sources":["store/actions/location.js","store/actionTypes.js","store/actions/weather.js","components/CurrentWeather/CurrentWeather.js","components/CityWeather/CityWeather.js","components/Location/Location.js","components/App/App.js","serviceWorker.js","store/reducers/location.js","store/reducers/weather.js","store/reducers/index.js","store/store.js","store/middleware/locationMiddleware.js","store/middleware/weatherMiddleware.js","index.js"],"names":["getLocation","type","getCurrentWeather","currentWeatherSuccess","payload","cityWeatherSuccess","connect","state","location","weather","current","props","useEffect","className","src","icon","alt","Math","round","main","temp","name","sys","country","min","max","value","onChange","e","target","cityWeather","city","getCityWeather","useState","setCity","onClick","description","temp_min","temp_max","wind","speed","clouds","all","pressure","coord","lat","lon","latitude","longitude","color","style","backgroundColor","Boolean","window","hostname","match","action","coords","getTemperatureColor","createRootReducer","combineReducers","middleware","thunk","store","next","a","getState","navigator","geolocation","getCurrentPosition","error","console","log","code","slice","searchParams","callback","q","axios","baseURL","url","params","appid","units","data","response","status","dir","composedEnhancers","compose","applyMiddleware","initialState","createStore","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1c78cd38.chunk.js","sourcesContent":["import {\r\n  GET_LOCATION,\r\n  LOCATION_SUCCESS\r\n} from '../actionTypes';\r\n\r\nexport function getLocation() {\r\n  return {\r\n    type: GET_LOCATION\r\n  };\r\n}\r\n\r\nexport function locationSuccess(payload) {\r\n  return {\r\n    type: LOCATION_SUCCESS,\r\n    payload\r\n  };\r\n}","/* location */\r\nexport const GET_LOCATION = 'GET_LOCATION';\r\nexport const LOCATION_SUCCESS = 'LOCATION_SUCCESS';\r\n/* weather */\r\nexport const GET_CURRENT_WEATHER = 'GET_CURRENT_WEATHER';\r\nexport const GET_CITY_WEATHER = 'GET_CITY_WEATHER';\r\nexport const CURRENT_WEATHER_SUCCESS = 'CURRENT_WEATHER_SUCCESS';\r\nexport const CITY_WEATHER_SUCCESS = 'CITY_WEATHER_SUCCESS';\r\n","import {\r\n  GET_CURRENT_WEATHER,\r\n  GET_CITY_WEATHER,\r\n  CURRENT_WEATHER_SUCCESS,\r\n  CITY_WEATHER_SUCCESS\r\n} from '../actionTypes';\r\n\r\nexport function getCurrentWeather() {\r\n  return {\r\n    type: GET_CURRENT_WEATHER\r\n  };\r\n}\r\nexport function currentWeatherSuccess(payload) {\r\n  return {\r\n    type: CURRENT_WEATHER_SUCCESS,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function getCityWeather(city) {\r\n  return {\r\n    type: GET_CITY_WEATHER,\r\n    payload: city\r\n  };\r\n}\r\nexport function cityWeatherSuccess(payload) {\r\n  return {\r\n    type: CITY_WEATHER_SUCCESS,\r\n    payload\r\n  };\r\n}","import React, {useEffect} from 'react';\nimport './CurrentWeather.css';\nimport {connect} from \"react-redux\";\nimport {getLocation} from \"../../store/actions/location\";\nimport {getCurrentWeather, currentWeatherSuccess} from \"../../store/actions/weather\";\n\nfunction CurrentWeather(props) {\n  const {location, weather, getCurrentWeather, currentWeatherSuccess} = props;\n\n  useEffect(() => {\n    getCurrentWeather();\n  }, [location, getCurrentWeather]);\n\n  function setTemperature(temp) {\n    currentWeatherSuccess({\n      ...weather,\n      main: {\n        ...weather.main,\n        temp: temp\n      }\n    });\n  }\n\n  return (\n    <div className=\"current-weather\">\n      {weather && <>\n        <img src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"\"/>\n        <h2 className=\"current__temperature\">{Math.round(weather.main?.temp)} <small>°C</small></h2>\n        <div className=\"current__city\">\n          {`${weather.name}, ${weather.sys?.country}`}\n        </div>\n        <p>\n          <input type=\"range\" min=\"-50\" max=\"50\" value={weather.main?.temp}\n                 onChange={e => setTemperature(e.target.value)}\n          />\n        </p>\n      </>}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    location: state.location,\n    weather: state.weather.current\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getLocation, getCurrentWeather, currentWeatherSuccess\n})(CurrentWeather);\n","import React, {useState} from 'react';\nimport './CityWeather.css';\nimport {connect} from \"react-redux\";\nimport {getLocation} from \"../../store/actions/location\";\nimport {getCityWeather} from \"../../store/actions/weather\";\n\nfunction CityWeather(props) {\n  const {cityWeather} = props;\n  const [city, setCity] = useState('');\n\n  return (\n    <div className=\"city-weather\">\n      <div className=\"city-weather__search\">\n        <input type=\"search\" onChange={(e)=>setCity(e.target.value)}/>\n        <button onClick={()=>props.getCityWeather(city)}>Search</button>\n      </div>\n      {cityWeather && <div className=\"city-weather__card\">\n        <img className=\"city-weather__img\" src={`https://openweathermap.org/img/wn/${cityWeather.weather[0].icon}@2x.png`} alt=\"\"/>\n        <b className=\"current__city\">\n          {`${cityWeather.name}, ${cityWeather.sys?.country} `}\n          <i> {cityWeather.weather[0].description}</i>\n        </b>\n        <div>\n          <span className=\"current__temperature\">{Math.round(cityWeather.main.temp*10)/10} <small>°C</small></span>\n          <span>\n            {`temperature from ${Math.round(cityWeather.main.temp_min*10)/10} to ${Math.round(cityWeather.main.temp_max*10)/10} °С, \n          wind ${cityWeather.wind.speed} m/s. clouds ${cityWeather.clouds.all} %, ${cityWeather.main.pressure} hpa`}\n          </span>\n        </div>\n        <div>\n          Geo coords [{cityWeather.coord.lat}, {cityWeather.coord.lon}]\n        </div>\n      </div>}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    location: state.location,\n    cityWeather: state.weather.city\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getLocation, getCityWeather\n})(CityWeather);\n","import React from 'react';\nimport './Location.css';\nimport {connect} from \"react-redux\";\nimport {getLocation} from \"../../store/actions/location\";\nimport {getCurrentWeather} from \"../../store/actions/weather\";\n\nfunction Location(props) {\n  const {location} = props;\n\n  return (\n    <div className=\"location\">\n      {location ?\n        <ul>\n          <li>latitude: {location.latitude}</li>\n          <li>longitude: {location.longitude}</li>\n        </ul>\n        :\n        <div className=\"question\">\n          <p>\n            Do you allow to proceed your location?\n          </p>\n          <div className=\"buttons\">\n            <button>Decline</button>\n            <button onClick={props.getLocation}>Allow</button>\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    location: state.location,\n    weather: state.weather.current\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getLocation, getCurrentWeather\n})(Location);\n","import React from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport CurrentWeather from \"../CurrentWeather/CurrentWeather\";\nimport CityWeather from \"../CityWeather/CityWeather\";\nimport Location from \"../Location/Location\";\n\nfunction App(props) {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{backgroundColor: props.color}}>\n        <Location/>\n        <CurrentWeather/>\n        <CityWeather/>\n      </header>\n    </div>\n  );\n}\n\nexport default connect(\n  state => ({color: state.weather.color})\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  GET_LOCATION,\r\n  LOCATION_SUCCESS,\r\n} from '../actionTypes';\r\n\r\nconst initialState = '';\r\n\r\nexport function location(state = initialState, action) {\r\n  switch (action.type) {\r\n\r\n    case GET_LOCATION:\r\n      return state;\r\n\r\n    case LOCATION_SUCCESS:\r\n      return {\r\n        latitude: action.payload.coords.latitude,\r\n        longitude: action.payload.coords.longitude,\r\n        description: action.payload.description\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import {\r\n  GET_CURRENT_WEATHER,\r\n  GET_CITY_WEATHER,\r\n  CURRENT_WEATHER_SUCCESS,\r\n  CITY_WEATHER_SUCCESS\r\n} from '../actionTypes';\r\n\r\nconst initialState = '';\r\n\r\nexport function weather(state = initialState, action) {\r\n  switch (action.type) {\r\n\r\n    case GET_CURRENT_WEATHER:\r\n      return state;\r\n    case CURRENT_WEATHER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        current: action.payload,\r\n        color: getTemperatureColor(action.payload.main.temp)\r\n      };\r\n\r\n    case GET_CITY_WEATHER:\r\n      return state;\r\n    case CITY_WEATHER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        city: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction getTemperatureColor(temp) {\r\n  return temp<-10 ? '#00ffff' :\r\n      temp>30 ? '#ff8c00' :\r\n        '#fff700';\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport {location} from \"../reducers/location\";\r\nimport {weather} from \"../reducers/weather\";\r\n\r\nconst createRootReducer = () => combineReducers({\r\n  location,\r\n  weather,\r\n});\r\nexport default createRootReducer","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport locationMiddleware from \"./middleware/locationMiddleware\";\r\nimport createRootReducer from \"./reducers\";\r\nimport thunk from 'redux-thunk'\r\n\r\nimport weatherMiddleware from \"./middleware/weatherMiddleware\";\r\n\r\nconst enhancers = [];\r\nconst middleware = [\r\n  thunk,\r\n  locationMiddleware,\r\n  weatherMiddleware,\r\n];\r\naddDevTools();\r\n\r\nconst composedEnhancers = compose(\r\n  applyMiddleware(...middleware),\r\n  ...enhancers\r\n);\r\n\r\n\r\nexport default function configureStore(initialState) {\r\n  return createStore(\r\n    createRootReducer(),\r\n    initialState,\r\n    composedEnhancers\r\n  );\r\n}\r\n\r\n\r\n//////////////\r\nfunction addDevTools () {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__\r\n      && window.__REDUX_DEVTOOLS_EXTENSION__({\r\n        name: `Redux`,\r\n        realtime: true,\r\n        trace: true,\r\n        traceLimit: 34\r\n      });\r\n\r\n    if (!devToolsExtension) {\r\n      console.warn('Install Redux DevTools Extension to inspect the app state: ' +\r\n        'https://github.com/zalmoxisus/redux-devtools-extension#installation')}\r\n\r\n    if (typeof devToolsExtension === 'function') {\r\n      enhancers.push(devToolsExtension);\r\n    }\r\n  }\r\n}","import {\r\n  GET_LOCATION,\r\n} from \"../actionTypes\";\r\nimport {locationSuccess} from \"../actions/location\";\r\n\r\n\r\nexport default store => next => async action => {\r\n\r\n  const {type} = action;\r\n  if (type !== GET_LOCATION) return next(action);\r\n  // next(action);\r\n  const state = store.getState();\r\n\r\n  if (!state.location.latitude && navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(\r\n      location => next(locationSuccess(location)),\r\n      error => console.log('Error occurred. Error code: ' + error.code)\r\n    )\r\n  }\r\n}","import axios from \"axios\";\r\nimport {\r\n  currentWeatherSuccess,\r\n  cityWeatherSuccess\r\n} from \"../actions/weather\";\r\n\r\nimport {\r\n  GET_CURRENT_WEATHER,\r\n  GET_CITY_WEATHER\r\n} from '../actionTypes';\r\nexport default store => next => async action => {\r\n\r\n  const {type, payload} = action;\r\n\r\n  if (type.slice(-7) !== 'WEATHER') return next(action);\r\n  // next(action);\r\n  const state = store.getState();\r\n\r\n  let searchParams, callback;\r\n  if (state.location.latitude || payload) {\r\n    switch (type) {\r\n      case GET_CURRENT_WEATHER:\r\n        searchParams = {\r\n          lat: state.location.latitude,\r\n          lon: state.location.longitude\r\n        };\r\n        callback = currentWeatherSuccess;\r\n        break;\r\n\r\n      case GET_CITY_WEATHER:\r\n        console.log('in', type);\r\n        searchParams = {\r\n          q: payload\r\n        };\r\n        callback = cityWeatherSuccess;\r\n        break;\r\n\r\n      default:\r\n        console.log('wrong action type');\r\n    }\r\n    try {\r\n      const {data} = await axios({\r\n        baseURL: 'https://api.openweathermap.org/data/2.5/',\r\n        url: 'weather',\r\n        params: {\r\n          ...searchParams,\r\n          appid: '142c1e9a1787ce68fb592fb786e93507',\r\n          units: 'metric'\r\n        }\r\n      });\r\n      // console.log('data', data);\r\n      next(callback(data));\r\n    } catch (e) {\r\n      if (e.response.status===404) console.dir('Wrong request')\r\n    }\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from \"react-redux\";\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore  from './store/store';\n\n/* redux, store */\nlet initialState = {};\nexport const store = configureStore(initialState);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}